maxOfLong
from test | stats l = max(languages.long);

l:long
5
;

maxOfInteger
from test | stats l = max(languages);

l:integer
5
;

maxOfShort
// short becomes int until https://github.com/elastic/elasticsearch-internal/issues/724
from test | stats l = max(languages.short);

l:integer
5
;

maxOfByte
// byte becomes int until https://github.com/elastic/elasticsearch-internal/issues/724
from test | stats l = max(languages.byte);

l:integer
5
;

maxOfDouble
from test | stats h = max(height);

h:double
2.1
;

maxOfFloat
// float becomes double until https://github.com/elastic/elasticsearch-internal/issues/724
from test | stats h = max(height.float);

h:double
2.0999999046325684
;

maxOfHalfFloat
// float becomes double until https://github.com/elastic/elasticsearch-internal/issues/724
from test | stats h = max(height.half_float);

h:double
2.099609375
;


maxOfScaledFloat
// float becomes double until https://github.com/elastic/elasticsearch-internal/issues/724
from test | stats h = max(height.scaled_float);

h:double
2.1
;


avgOfLong
from test | stats l = avg(languages.long);

l:double
3.1222222222222222
;

avgOfInteger
from test | stats l = avg(languages);

l:double
3.1222222222222222
;

avgOfShort
from test | stats l = avg(languages.short);

l:double
3.1222222222222222
;

avgOfByte
from test | stats l = avg(languages.byte);

l:double
3.1222222222222222
;

avgOfDouble
from test | stats h = avg(height);

h:double
1.7682
;

avgOfFloat
from test | stats h = avg(height.float);

h:double
1.7681999909877777
;

avgOfHalfFloat
from test | stats h = avg(height.half_float);

h:double
1.76818359375
;
avgOfScaledFloat
from test | stats h = avg(height.scaled_float);

h:double
1.7682
;

sumOfLong
from test | stats l = sum(languages.long);

l:long
281
;

sumOfInteger
from test | stats l = sum(languages);

l:long
281
;

sumOfByte
from test | stats l = sum(languages.byte);

l:long
281
;

sumOfShort
from test | stats l = sum(languages.short);

l:long
281
;

sumOfDouble
from test | stats h = sum(height);

h:double
176.82
;

sumOfFloat
from test | stats h = sum(height.float);

h:double
176.81999909877777
;

sumOfHalfFloat
from test | stats h = sum(height.half_float);

h:double
176.818359375
;

sumOfScaledFloat
from test | stats h = sum(height.scaled_float);

h:double
176.82
;

IfDuplicateNamesLastOneWins
from test | stats h = avg(height), h = min(height) by languages | sort languages;

h:d  | languages:i
1.42 | 1
1.42 | 2
1.44 | 3
1.52 | 4
1.5  | 5
;


IfDuplicateNamesGroupingHasPriority
from test | stats languages = avg(height), languages = min(height) by languages | sort languages;

languages:i
1
2
3
4
5
;


byStringAndLong
from test | eval trunk_worked_seconds = avg_worked_seconds / 100000000 * 100000000 | stats c = count(gender) by gender, trunk_worked_seconds | sort c desc;

c:long | gender:keyword | trunk_worked_seconds:long
30 | M | 300000000
27 | M | 200000000
22 | F | 300000000
11 | F | 200000000
;

byStringAndString
from test | eval hire_year_str = date_format(hire_date, "yyyy") | stats c = count(gender) by gender, hire_year_str | sort c desc, gender, hire_year_str | where c >= 5;

c:long | gender:keyword | hire_year_str:keyword
8 | F | 1989
8 | M | 1987
8 | M | 1990
7 | M | 1986
6 | M | 1985
6 | M | 1988
5 | M | 1991
5 | M | 1992
;

byLongAndLong
from test | eval trunk_worked_seconds = avg_worked_seconds / 100000000 * 100000000 | stats c = count(languages.long) by languages.long, trunk_worked_seconds | sort c desc;

c:long | languages.long:long | trunk_worked_seconds:long
15 | 5 | 300000000
11 | 2 | 300000000
10 | 4 | 300000000
 9 | 3 | 200000000
 8 | 2 | 200000000
 8 | 4 | 200000000
 8 | 3 | 300000000
 8 | 1 | 200000000
 7 | 1 | 300000000
 6 | 5 | 200000000
;

byUnmentionedLongAndLong
from test | eval trunk_worked_seconds = avg_worked_seconds / 100000000 * 100000000 | stats c = count(gender) by languages.long, trunk_worked_seconds | sort c desc;

c:long | languages.long:long | trunk_worked_seconds:long
13 | 5 | 300000000
10 | 2 | 300000000
 9 | 4 | 300000000
 9 | 3 | 200000000
 8 | 4 | 200000000
 8 | 3 | 300000000
 7 | 1 | 200000000
 6 | 2 | 200000000
 6 | 1 | 300000000
 4 | 5 | 200000000
;
