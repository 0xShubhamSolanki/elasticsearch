rowWithStrings
row a = "hi", b = "", c = "Ünîcødé❗️";

a:keyword | b:keyword | c:keyword
hi | | Ünîcødé❗️
;

length
row a = "hello", b = "" | eval y = length(a) + length(b);

a:keyword | b:keyword | y:integer
hello | | 5
;

// note, emojis are encoded with at least two unicode code points
lengthWithNonAsciiChars
row a = "¡", b = "❗️" | eval y = length(a) | eval z = length(b);

a:keyword | b:keyword | y:integer | z:integer
¡ | ❗️ | 1 | 2
;

foldLength
row a = 1 | eval b = length("hello");

a:integer | b:integer
1 | 5
;


length
from employees | sort emp_no | limit 3 | eval l = length(first_name) | project emp_no, l;

emp_no:integer | l:integer
10001 | 6
10002 | 7
10003 | 5
;

startsWithConstant
from employees | sort emp_no | limit 10 | eval f_S = starts_with(first_name, "S") | project emp_no, first_name, f_S;

emp_no:integer | first_name:keyword  | f_S:boolean
10001 | Georgi    | false
10002 | Bezalel   | false
10003 | Parto     | false
10004 | Chirstian | false
10005 | Kyoichi   | false
10006 | Anneke    | false
10007 | Tzvetan   | false
10008 | Saniya    | true
10009 | Sumant    | true
10010 | Duangkaew | false
;

startsWithField
from employees | where emp_no <= 10010 | eval f_l = starts_with(last_name, gender) | project emp_no, last_name, gender, f_l;

emp_no:integer | last_name:keyword | gender:keyword | f_l:boolean
10001 | Facello   | M    | false
10002 | Simmel    | F    | false
10003 | Bamford   | M    | false
10004 | Koblick   | M    | false
10005 | Maliniak  | M    | true
10006 | Preusig   | F    | false
10007 | Zielinski | F    | false
10008 | Kalloufi  | M    | false
10009 | Peac      | F    | false
10010 | Piveteau  | null | null
;

substring
from employees | where emp_no <= 10010 | eval f_l = substring(last_name, 3) | project emp_no, last_name, f_l;

emp_no:integer | last_name:keyword | f_l:keyword
10001 | Facello   | cello
10002 | Simmel    | mmel
10003 | Bamford   | mford
10004 | Koblick   | blick
10005 | Maliniak  | liniak
10006 | Preusig   | eusig
10007 | Zielinski | elinski
10008 | Kalloufi  | lloufi
10009 | Peac      | ac
10010 | Piveteau  | veteau
;

substring with length
from employees | where emp_no <= 10010 | eval f_l = substring(last_name, 3, 1) | project emp_no, last_name, f_l;

emp_no:integer | last_name:keyword | f_l:keyword
10001 | Facello   | c
10002 | Simmel    | m
10003 | Bamford   | m
10004 | Koblick   | b
10005 | Maliniak  | l
10006 | Preusig   | e
10007 | Zielinski | e
10008 | Kalloufi  | l
10009 | Peac      | a
10010 | Piveteau  | v
;

substring negative start
from employees | where emp_no <= 10010 | eval f_l = substring(last_name, -3) | project emp_no, last_name, f_l;

emp_no:integer | last_name:keyword | f_l:keyword
10001 | Facello   | llo
10002 | Simmel    | mel
10003 | Bamford   | ord
10004 | Koblick   | ick
10005 | Maliniak  | iak
10006 | Preusig   | sig
10007 | Zielinski | ski
10008 | Kalloufi  | ufi
10009 | Peac      | eac
10010 | Piveteau  | eau
;

substring nested negative start
from employees | where emp_no <= 10010 | eval f_l = substring(substring(last_name, -3),-1) | project emp_no, last_name, f_l;

emp_no:integer | last_name:keyword | f_l:keyword
10001 | Facello   | o
10002 | Simmel    | l
10003 | Bamford   | d
10004 | Koblick   | k
10005 | Maliniak  | k
10006 | Preusig   | g
10007 | Zielinski | i
10008 | Kalloufi  | i
10009 | Peac      | c
10010 | Piveteau  | u
;

substring length
from employees | where emp_no <= 10010 | eval f_l = length(substring(last_name, 3)) | project emp_no, last_name, f_l;

emp_no:integer | last_name:keyword | f_l:integer
10001 | Facello   | 5
10002 | Simmel    | 4
10003 | Bamford   | 5
10004 | Koblick   | 5
10005 | Maliniak  | 6
10006 | Preusig   | 5
10007 | Zielinski | 7
10008 | Kalloufi  | 6
10009 | Peac      | 2
10010 | Piveteau  | 6
;

substring pair
from employees | where emp_no <= 10010 | eval x = substring(last_name, 1, 1), y = 1, z = substring("abcdef", y, y) | project emp_no, last_name, x, z;

emp_no:integer | last_name:keyword | x:keyword | z:keyword
10001 | Facello   | F | a
10002 | Simmel    | S | a
10003 | Bamford   | B | a
10004 | Koblick   | K | a
10005 | Maliniak  | M | a
10006 | Preusig   | P | a
10007 | Zielinski | Z | a
10008 | Kalloufi  | K | a
10009 | Peac      | P | a
10010 | Piveteau  | P | a
;

concat
from employees | sort emp_no | limit 10 | eval name = concat(first_name, " ", last_name) | project emp_no, name;

emp_no:integer | name:keyword
10001 | Georgi Facello
10002 | Bezalel Simmel
10003 | Parto Bamford
10004 | Chirstian Koblick
10005 | Kyoichi Maliniak
10006 | Anneke Preusig
10007 | Tzvetan Zielinski
10008 | Saniya Kalloufi
10009 | Sumant Peac
10010 | Duangkaew Piveteau
;

concatComplex
from employees | sort emp_no | limit 10 | eval foo = " - ", x = concat(gender, foo) | eval name = concat(x, first_name, " ", last_name, ", ", concat(first_name, last_name)) | project emp_no, name;

emp_no:integer | name:keyword
10001          | M - Georgi Facello, GeorgiFacello
10002          | F - Bezalel Simmel, BezalelSimmel
10003          | M - Parto Bamford, PartoBamford
10004          | M - Chirstian Koblick, ChirstianKoblick
10005          | M - Kyoichi Maliniak, KyoichiMaliniak
10006          | F - Anneke Preusig, AnnekePreusig
10007          | F - Tzvetan Zielinski, TzvetanZielinski
10008          | M - Saniya Kalloufi, SaniyaKalloufi
10009          | F - Sumant Peac, SumantPeac
10010          | null
;

split
// tag::split[]
ROW words="foo;bar;baz;qux;quux;corge"
| EVAL word = SPLIT(words, ";")
// end::split[]
;

words:keyword | word:keyword
// tag::split-result[]
foo;bar;baz;qux;quux;corge | [foo,bar,baz,qux,quux,corge]
// end::split-result[]
;

mvMin
// tag::mv_min[]
ROW a=["foo", "bar"]
| EVAL min_a = MV_MIN(a)
// end::mv_min[]
;

// tag::mv_min-result[]
     a:keyword | min_a:keyword
["foo", "bar"] | "bar"
// end::mv_min-result[]
;

groupByMv
from employees | stats min(salary), max(salary) by job_positions | sort job_positions | limit 5;

min(salary):integer | max(salary):integer | job_positions:keyword
25976               | 74970               | Accountant
28941               | 69904               | Architect
29175               | 58121               | Business Analyst
25945               | 74999               | Data Scientist
25324               | 58715               | Head Human Resources
;
